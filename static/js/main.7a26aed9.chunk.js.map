{"version":3,"sources":["component/Card.js","serviceWorker.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","Boolean","window","location","hostname","match","CardList","robots","cardCompnent","i","map","user","component_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","filteredRobots","state","filter","robot","toLowerCase","includes","console","log","_this2","fetch","then","response","json","users","_this3","_this$state","length","component_SearchBox","component_Scroll","component_CardList","Component","ReactDOM","render","src_container_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8KAeeA,SAbF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAKC,EAAcF,EAAdE,MAAMC,EAAQH,EAARG,GACzB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,OCIcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCJSC,EAXA,SAAAhB,GAAc,IAAZiB,EAAYjB,EAAZiB,OACVC,GADsBlB,EAALmB,EACHF,EAAOG,IAAI,SAACC,EAAKF,GACpC,OAAOf,EAAAC,EAAAC,cAACgB,EAAD,CAAMC,IAAKJ,EAAGhB,GAAIc,EAAOE,GAAGhB,GAAIF,KAAMgB,EAAOE,GAAGlB,KAAMC,MAAOe,EAAOE,GAAGjB,WAE/E,OACAE,EAAAC,EAAAC,cAAA,WACEY,ICMYM,EAbE,SAAAxB,GAAkB,IAAhByB,EAAgBzB,EAAhByB,aAClB,OACArB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIEI,EATF,SAACC,GACb,OACC1B,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UACjEJ,EAAMK,WC6CMC,qBA7Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeDI,eAAe,SAACC,GACfR,EAAKS,SAAS,CAACC,YAAYF,EAAMG,OAAOC,QACxC,IAAMC,EAAiBb,EAAKc,MAAMlC,OAAOmC,OAAO,SAAAC,GAC/C,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASlB,EAAKc,MAAMJ,YAAYO,iBAEjEE,QAAQC,IAAIP,IAnBZb,EAAKc,MAAM,CACVlC,OAAQ,GACR8B,YAAY,IAJDV,mFAQM,IAAAqB,EAAAlB,KAClBmB,MAAM,8CAA8CC,KAAK,SAAAC,GACxD,OAAOA,EAASC,SACdF,KAAK,SAAAG,GAAQL,EAAKZ,SAAS,CAAC7B,OAAO8C,uCAYhC,IAAAC,EAAAxB,KAAAyB,EACqBzB,KAAKW,MAAzBlC,EADDgD,EACChD,OACDiC,GAFAe,EACQlB,YACS9B,EAAOmC,OAAO,SAAAC,GACpC,OAAOA,EAAMpD,KAAKqD,cAAcC,SAASS,EAAKb,MAAMJ,YAAYO,kBAEjE,OAAQrC,EAAOiD,OAIhB9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAAC6D,EAAD,CAAW1C,aAAce,KAAKI,iBAC9BxC,EAAAC,EAAAC,cAAC8D,EAAD,KACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAUpD,OAAQiC,MAPhB9C,EAAAC,EAAAC,cAAA,4BA9BegE,cCElBC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAAOC,SAASC,eAAe,SLyHzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.7a26aed9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default Card","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport Card from \"./Card\"\r\n\r\nconst CardList=({robots,i})=>{\r\n\tconst cardCompnent= robots.map((user,i) =>{\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t})\r\n\treturn(\r\n\t<div>\r\n\t\t{cardCompnent}\r\n\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList","import React from \"react\";\r\n\r\nconst SearchBox =({searchChange})=>{\r\n\treturn(\r\n\t<div className=\"pa2\">\r\n\t\t<input \r\n\t\t className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t type=\"search\"\r\n\t\t placeholder=\"search robots\"\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox","import React from \"react\";\r\n\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY: \"scroll\", border:\"1px solid black\",height:\"800px\"}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Scroll","import React,{Component} from \"react\";\r\nimport CardList from \"../component/CardList\";\r\nimport SearchBox from \"../component/SearchBox\"\r\nimport Scroll from \"../component/Scroll\"\r\nimport \"./App.css\";\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchField:\"\"\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\").then(response=>{\r\n\t\t\treturn response.json()\r\n\t\t}).then(users=>{this.setState({robots:users})\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchField:event.target.value})\r\n\t\tconst filteredRobots = this.state.robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\tconsole.log(filteredRobots);\r\n\t}\r\nrender(){\r\n\t\tconst {robots,searchField}=this.state\r\n\t\tconst filteredRobots = robots.filter(robot=>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn !robots.length?\r\n\t\t\t<h1>loading</h1>:\r\n\t\t\r\n\t (\r\n\t<div className=\"tc\">\r\n\t<h1 className=\"f1\">Robot friends</h1>\r\n\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t<Scroll>\r\n\t<CardList robots={filteredRobots}/>\r\n\t</Scroll>\r\n\t</div>\r\n\t);\r\n\r\n}\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './component/Card';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from \"./container/App\"\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}